---
import type { HTMLAttributes } from "astro/types";

type OneField = {
	type: astroHTML.JSX.HTMLInputTypeAttribute | "select";
	name: string;
	placeholder: string;
	inputProps?: (HTMLAttributes<"input"> | HTMLAttributes<"select">);
	options?: { name: string, value: string }[];
};

type MultipleFields = {
	types: (astroHTML.JSX.HTMLInputTypeAttribute | "select")[];
	names: string[];
	placeholders: string[];
	inputsProps?: (HTMLAttributes<"input"> | HTMLAttributes<"select">)[];
	options?: { name: string, value: string }[][];
};

type Props = {
	label: string;
	info?: string;
	id: string;
} & (OneField | MultipleFields);
const { label, info, id, ...props } = Astro.props;
---

<label for={`#${id}`}>{label}</label>
<div class:list={["rows"]}>
	{'type' in props && <div class:list={["columns"]}>{(props.type === 'select' ? <select
		id={id}
		name={props.name}
		title={props.placeholder}
		{...props.inputProps}
	>
		<option disabled selected>{props.placeholder}</option>
		{props.options?.map(o => <option value={o.value}>{o.name}</option>)}
	</select> : <input
		type={props.type}
		id={id}
		name={props.name}
		title={props.placeholder}
		placeholder={props.placeholder}
		{...props.inputProps}
	/>)}</div>}
	{'types' in props && <div class:list={["columns"]}>
		{props.types.map((t, i) => (t === 'select' ? <select
			id={id}
			name={props.names[i]}
			title={props.placeholders[i]}
			{...(props.inputsProps ?? [])[i]}
		>
			<option disabled selected>{props.placeholders[i]}</option>
			{props.options?.[i]?.map(o => <option value={o.value}>{o.name}</option>)}
		</select> : <input
			type={t}
			id={id}
			name={props.names[i]}
			title={props.placeholders[i]}
			placeholder={props.placeholders[i]}
			{...(props.inputsProps ?? [])[i]}
		/>))}
	</div>}
</div>
<p>{info ?? <slot name="info" />}</p>

<style lang="scss">
	label {
		display: block;
		color: #72767d;
		font-size: 9pt;
		font-weight: bold;
		text-transform: uppercase;
		margin: 17px 0 9px;
	}

	input,
	button,
	select {
		outline: none;
		width: 100%;
		padding: 13px;
		border: solid 1px #c7c9cb;
		border-radius: 3px;
		background-color: #fbfbfb;
		box-sizing: border-box;
		font-family: inherit;
		font-size: 12pt;
		text-overflow: ellipsis;
		height: 3em;

		&:disabled {
			background-color: #fcfcfd;
			border-color: #eaeaea;
			cursor: not-allowed;
		}

		&:active,
		&:focus {
			border-color: #7289da;
		}
	}
	select {
		cursor: pointer;
	}
	.columns {
		display: flex;

		:not(:last-child) {
			border-top-right-radius: 0;
			border-bottom-right-radius: 0;
			border-right: 0;
		}

		:not(:first-child) {
			border-top-left-radius: 0;
			border-bottom-left-radius: 0;
		}
	}

	.rows {
		display: flex;
		flex-direction: column;
		gap: 10px;
	}
	p {
		margin: 0;
	}
	p:not(:empty) {
		margin: 5px 0 0;
		font-size: 8pt;
		color: #b4b6b9;
	}
</style>
