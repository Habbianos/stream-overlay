---
import Field from "@/components/OptionsLayout/Field.astro";
import Navbar from "@/components/OptionsLayout/Navbar.astro";
import NavbarLink from "@/components/OptionsLayout/Navbar_Link.astro";
import NavbarSep from "@/components/OptionsLayout/Navbar_Sep.astro";
import NavbarTitle from "@/components/OptionsLayout/Navbar_Title.astro";
import Note from "@/components/OptionsLayout/Note.astro";
import Section from "@/components/OptionsLayout/Section.astro";
import RootLayout from "@/layouts/RootLayout.astro";
import type { ChatHistoryOptions } from "@/services/chatHistory";
import type { PubsubOptions } from "@/services/pubsub";
import type { RoomVisOptions } from "@/services/roomVisualization";
import type { TmiOptions } from "@/services/tmi";

export type ChatRoomOptions = PubsubOptions &
	TmiOptions &
	ChatHistoryOptions &
	RoomVisOptions & {
		folowerOnly?: boolean;
	};
---

<RootLayout title="Options - Chat Room">
	<Navbar>
		<NavbarTitle name="Chat Room Overlay" />
		<NavbarLink name="Livestream" link="#livestream" />
		<NavbarLink name="Rewards" link="#rewards" />
		<NavbarLink name="Room" link="#room" />
		<NavbarLink name="Data storage" link="#data" />
		<NavbarSep />
		<NavbarTitle name="Result" />
		<NavbarLink name="Preview" link="#preview" />
	</Navbar>

	<main>
		<Section
			id="livestream"
			title="Livestream Info"
			info="Required details to watch your livestream chat in real time"
		>
			<Field
				label="Display name"
				placeholder="Your Twitch user name"
				type="text"
				id="userName"
			/>
			<Field
				label="Streammer ID"
				placeholder="Your Twitch user ID"
				type="text"
				id="userId"
			>
				<Fragment slot="info">
					You can get your ID <a
						href="https://www.streamweasels.com/tools/convert-twitch-username-to-user-id/"
						target="_blank">here</a
					>, it doesn't need to sign-in
				</Fragment>
			</Field>
		</Section>

		<hr />

		<Section
			id="rewards"
			title="Available Rewards"
			info="Configure which rewards triggers actions in your overlay"
		>
			<Note
				info="Remmember that you can configure the reward to skip the queue, as we won't confirm the claim in your behalfe. The overley will only capture claims while the page is open."
			/>
		</Section>

		<hr />

		<section id="config_count">
			<article>
				<form id="fm_time">
					<label for="#ipt_time_2_end">Reward name</label>
					<div class="mesclar">
						<input
							type="text"
							id="ipt_time_2_end"
							title="Enter the exact reward name you have"
							placeholder="Enter the exact reward name you have"
						/>
					</div>
					<p>
						If you enter the same reward multiple times, one will be
						picked randomly
					</p>
				</form>
				<form id="fm_add_time">
					<label for="#ipt_time_2_add">Action</label>
					<div class="mesclar">
						<select>
							<option value="fx">Effect</option>
						</select>
						<input
							type="text"
							id="ipt_time_2_add"
							title="Predefined value"
							placeholder="Predefined value"
						/>
					</div>
					<p>
						If you don't fill a prefedined value, remember to enable
						viewers to fill it in when claiming the reward
					</p>
				</form>
			</article>
		</section>
	</main>
</RootLayout>

<style lang="scss">
	body {
		--nav_w: 200px;
		--left_bg_color: #f3f3f3;
		--right_bg_color: #fff;
		font-family: "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans",
			"Helvetica Neue", sans-serif;
		background-image: linear-gradient(
			to right,
			var(--left_bg_color) 50%,
			var(--right_bg_color) 50%
		);
		min-height: 100vh;
		display: flex;
		max-width: min(70%, 1080px);
		margin: 0 auto;
	}

	main {
		padding: 40px 0 50vh 40px;
		background-color: var(--right_bg_color);
		flex: 1;
	}
	/* header >  */
	p {
		margin: 5px 0 0;
		font-size: 8pt;
		color: #b4b6b9;
	}
	#config_count article {
		display: flex;
		flex-direction: row;
		// margin: 0 -5px;
		gap: 5px;
	}
	#config_count form {
		flex-basis: 0;
		flex-grow: 1;
		// margin: 0 5px;
	}
	form label {
		color: #72767d;
		font-size: 9pt;
		font-weight: bold;
		text-transform: uppercase;
		margin: 17px 0 9px;
	}
	form input,
	form button,
	form select {
		outline: none;
		width: 100%;
		padding: 13px;
		border: solid 1px #c7c9cb;
		border-radius: 3px;
		background-color: #fbfbfb;
		box-sizing: border-box;
		font-family: inherit;
		font-size: 12pt;
		text-overflow: ellipsis;
		height: 49px;
	}
	form select {
		cursor: pointer;
	}
	form :has(select + input) {
		display: flex;

		select {
			border-top-right-radius: 0;
			border-bottom-right-radius: 0;
			border-right: 0;
		}

		input {
			border-top-left-radius: 0;
			border-bottom-left-radius: 0;
		}
	}

	input[type="submit"],
	form button {
		background-color: #edeef1 !important;
		border: 0 !important;
		color: #7f8993;
		cursor: pointer;
	}
	form input:disabled,
	form select:disabled {
		background-color: #fcfcfd;
		border-color: #eaeaea;
		cursor: not-allowed;
	}
	form input:active,
	form input:focus,
	form select:active,
	form select:focus {
		border-color: #7289da;
	}
	form input[type="time"] {
		padding-right: 100px;
		height: 49px;
	}
	form div.mesclar {
		position: relative;
	}
	form div.mesclar input ~ input[type="submit"],
	form div.mesclar input ~ button {
		position: absolute;
		right: 0;
		top: 0;
		width: fit-content;
		margin: 5px;
		padding: 9px;
	}

	hr {
		margin: 30px 0;
	}
</style>

<script>
	type Reward = {
		trigger: string;
		action: string;
	};
	type FormOptions = {
		userName: string;
		userId: number;
		rewards: Reward[];
	};

	const INITIAL_OPTIONS = {
		userName: "alynva",
		userId: 155285216,
		rewards: [
			{ trigger: "Visual", action: "visual" },
			{ trigger: "Estilo", action: "estilo" },
			{ trigger: "Efeito", action: "efeito" },
			{ trigger: "Car Doggy", action: "efeito:48" },
			{ trigger: "Hap-Hop", action: "efeito:dance.1" },
			{ trigger: "Pogo Mogo", action: "efeito:dance.2" },
			{ trigger: "Duck Funk", action: "efeito:dance.3" },
			{ trigger: "Rollie", action: "efeito:dance.4" },
			{ trigger: "Dragon", action: "efeito:100" },
		],
	} as FormOptions;
	function init() {
		const form = document.querySelector("form")!;
		form.addEventListener("submit", (evt) => {
			evt.preventDefault();
			// update();
		});
		// form.addEventListener("change", update);
		// form.appendChild(buildFields(INITIAL_OPTIONS, "options"));
	}
	function buildFields(data: any, name: string) {
		const field = document.createElement("fieldset");
		if (name) {
			const legend = document.createElement("legend");
			legend.innerText = name;
			field.appendChild(legend);
		}

		if (Array.isArray(data)) {
			const input = document.createElement("input");
			input.type = "hidden";
			input.name = name;
			field.appendChild(input);
			for (const d of data) {
				field.appendChild(buildFields(d, ""));
			}
		} else {
			for (const prop in data) {
				if (["string", "number"].includes(typeof data[prop])) {
					const label = document.createElement("label");
					label.innerText = prop;
					field.appendChild(label);

					const input = document.createElement("input");
					input.type =
						typeof data[prop] === "number" ? "number" : "text";
					input.value = data[prop];
					input.name = prop;
					label.appendChild(input);
				} else {
					field.appendChild(buildFields(data[prop], prop));
				}
			}
		}
		return field;
	}

	function getCurrentData() {
		const obj = {} as FormOptions;
		const rewards = [] as Reward[];

		// Extracting userName and userId
		const userNameInput = document.querySelector(
			'input[name="userName"]'
		) as HTMLInputElement;
		const userIdInput = document.querySelector(
			'input[name="userId"]'
		) as HTMLInputElement;
		obj.userName = userNameInput.value.trim();
		obj.userId = parseInt(userIdInput.value.trim());

		// Extracting rewards
		const rewardFieldsets = document.querySelectorAll(
			"fieldset:has(input[type=hidden]) fieldset"
		);
		rewardFieldsets.forEach((fieldset) => {
			const triggerInput = fieldset.querySelector(
				'input[name="trigger"]'
			) as HTMLInputElement;
			const actionInput = fieldset.querySelector(
				'input[name="action"]'
			) as HTMLInputElement;
			rewards.push({
				trigger: triggerInput.value.trim(),
				action: actionInput.value.trim(),
			});
		});

		obj.rewards = rewards;

		return obj;
	}
	function update() {
		const data = getCurrentData();
		const params = new URLSearchParams();
		params.set("userName", data.userName);
		params.set("userId", data.userId + "");
		for (const reward of data.rewards) {
			params.set(reward.action, reward.trigger);
		}

		const url =
			window.location.origin +
			import.meta.env.BASE_URL +
			"/chat-room/overlay?" +
			params.toString();
		// document.querySelector("iframe")!.src = url;
		// document.querySelector("pre code")!.innerHTML = url;
	}

	init();
	update();
</script>
