---
import RootLayout from "@/layouts/RootLayout.astro";
---

<RootLayout title="Chat Overlay">
	<div id="chat-container"></div>
</RootLayout>

<script>
	import parseQuery from "@/utils/parseQuery";
	import type { ChatRoomOptions } from "./index.astro";
	import initChatHistory from "@/services/chatHistory";
	import { HOSTS } from "@/services/habboAPI";
	import { setBubbleStyle, setLook } from "@/services/db"

	const params = parseQuery() as ChatRoomOptions;

	console.log('Received options:', params)

	const chatContainer = document.querySelector(
		"#chat-container",
	) as HTMLElement;
	const { createChatMessage } = initChatHistory(params, chatContainer);

	const ACTIONS = {
		visual: (user, message) => {
			const cmd = message.trim().split(" ").filter(x => !!x)
			if (!cmd.length) return

			if (cmd[1]) {
				if (cmd[0] in HOSTS) {
					setLook(user, { hotel: cmd[0] as keyof typeof HOSTS, nick: cmd[1] })
				}
			} else {
				setLook(user, { figureString: cmd[0] })
			}
			updateAvatar(user)
		},
		estilo: (user, message) => {
			const cmd = message.trim().split(" ").filter(x => !!x)

			if (cmd.length) {
				setBubbleStyle(user, cmd[0])
			}
		},
		efeito: (user, message) => {
			const cmd = message.trim().split(" ").filter(x => !!x)

			if (cmd.length) {
				setEffect(user, cmd[0])
			}
		},
		'efeito:custom': (user, message) => {
			setEffect(user, message)
		}
	} as { [action: string]: (user: string, message: string) => void }

	// initTmi(params, {
	// 	onChatMessage(username, message) {
	// 		createChatMessage(username, message);
	// 		updateAvatar(username)
	// 	},
	// });
</script>

<style lang="scss">
	body {
		margin: 0;
		padding-bottom: 10px;
	}

	* {
		image-rendering: pixelated;
	}

	@font-face {
		font-family: Habbo Ubuntu Condensed;
		src: url("https://alynva.surge.sh/fonts/11_class_49_Ubuntu.otf");
	}

	:root {
		--scale: 2;
	}

	iframe {
		position: absolute;
		bottom: 0;
		border: 0;
	}

	#chat-container {
		height: 380px;
		width: 100%;
		position: relative;
	}

	.emote {
		width: calc(20px * var(--scale));
		vertical-align: middle;
	}

	.message {
		width: fit-content;
		max-width: calc(300px * var(--scale, 1));
		font-family: Habbo Ubuntu Condensed;
		font-size: calc(12pt * var(--scale, 1));
		position: absolute;
		left: 50%;
		transform: translateX(-50%);
		transition: top 0.4s;
	}

	.message {
		border-image-source: var(--base);

		--top: var(--sliceXY1);
		--right: calc(var(--baseW) - var(--sliceWH0) - var(--sliceXY0));
		--bottom: calc(var(--baseH) - var(--sliceWH1) - var(--sliceXY1));
		--left: var(--sliceXY0);

		color: var(--textColorRGB);

		border-image-slice: var(--top) var(--right) var(--bottom) var(--left)
			fill;
		border-image-width: calc(var(--top) * 1px * var(--scale))
			calc(var(--right) * 1px * var(--scale))
			calc(var(--bottom) * 1px * var(--scale))
			calc(var(--left) * 1px * var(--scale));
		border-image-outset: calc(var(--textFieldMargins1) * 1px * var(--scale))
			calc(var(--textFieldMargins2) * 1px * var(--scale))
			calc(var(--textFieldMargins3) * 1px * var(--scale))
			calc(var(--textFieldMargins0) * 1px * var(--scale));
		border-image-repeat: repeat;

		margin-top: calc(var(--textFieldMargins1) * 1px * var(--scale));
		margin-bottom: calc(var(--textFieldMargins3) * 1px * var(--scale));
	}

	.message:after {
		content: "";
		background-image: var(--pointer);
		background-size: contain;
		width: calc(var(--pointerW) * 1px * var(--scale));
		height: calc(var(--pointerH) * 1px * var(--scale));

		position: absolute;

		bottom: calc(
			var(--textFieldMargins3) * -1px * var(--scale) + var(--pointerH) *
				-1px * var(--scale) + 3px
		);
		left: clamp(0px, calc(100% - 10px), calc(50% + 0px));
	}

	.message:before {
		content: "";
		background-image: var(--icon);
		background-size: contain;
		width: calc(var(--iconW) * 1px * var(--scale));
		height: calc(var(--iconH) * 1px * var(--scale));

		position: absolute;

		left: calc(
			var(--faceXY0) * 1px * var(--scale) - var(--textFieldMargins0) * 1px *
				var(--scale) - 8px * var(--scale)
		);
		top: calc(
			var(--faceXY1) * 1px * var(--scale) - var(--textFieldMargins1) * 1px *
				var(--scale) - 9px * var(--scale)
		);
	}

	.message .color {
		border-image-source: var(--bubbleColor);

		--top: var(--sliceXY1);
		--right: 0;
		--bottom: calc(var(--baseH) - var(--sliceWH1) - var(--sliceXY1));
		--left: var(--sliceXY0);
		border-image-slice: var(--top) var(--right) var(--bottom) var(--left)
			fill;
		// calc(var(--top) * 1px * var(--scale)) calc(var(--right) * 1px * var(--scale)) calc(var(--bottom) * 1px * var(--scale)) calc(var(--left) * 1px * var(--scale));
		border-image-repeat: repeat;

		width: calc(var(--bubbleColorW) * 1px * var(--scale));
		height: calc(
			100% + var(--textFieldMargins1) * 1px * var(--scale) +
				var(--textFieldMargins3) * 1px * var(--scale)
		);

		position: absolute;

		left: calc(var(--textFieldMargins0) * -1px * var(--scale));
		top: calc(var(--textFieldMargins1) * -1px * var(--scale));
	}

	.message .user {
		text-indent: -10000px;
		--sourceW: 54px;
		--sourceH: 62px;

		--scaledW: calc(var(--sourceW) / 2);
		--scaledH: calc(var(--sourceH) / 2);

		display: var(--userDisplay);

		width: calc(var(--scaledW) * var(--scale));
		height: calc(var(--scaledH) * var(--scale));
		position: absolute;

		left: calc(
			var(--faceXY0) * 1px * var(--scale) - var(--textFieldMargins0) * 1px *
				var(--scale) - 12px * var(--scale)
		);
		top: calc(
			var(--faceXY1) * 1px * var(--scale) - var(--textFieldMargins1) * 1px *
				var(--scale) - 12px * var(--scale)
		);
	}

	.message .nick,
	.message b {
		font-weight: bold;
	}
</style>
