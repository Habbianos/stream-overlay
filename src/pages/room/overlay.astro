---
import RootLayout from "@/layouts/RootLayout.astro";
---

<RootLayout title="Chat Overlay">
	<canvas id="room-container"></canvas>
</RootLayout>

<script>
	import parseQuery from "@/utils/parseQuery";
	import type { ChatRoomOptions } from "./index.astro";
	import initRoomVis from "@/services/roomVisualization";
	import { HOSTS } from "@/services/habboAPI";
	import { setBubbleStyle, setLook } from "@/services/db"

	const params = parseQuery() as ChatRoomOptions;

	console.log('Received options:', params)

	const roomContainer = document.querySelector(
		"#room-container",
	) as HTMLCanvasElement;
	const { updateAvatar, setEffect } = initRoomVis(params, roomContainer);

	const ACTIONS = {
		visual: (user, message) => {
			const cmd = message.trim().split(" ").filter(x => !!x)
			if (!cmd.length) return

			if (cmd[1]) {
				if (cmd[0] in HOSTS) {
					setLook(user, { hotel: cmd[0] as keyof typeof HOSTS, nick: cmd[1] })
				}
			} else {
				setLook(user, { figureString: cmd[0] })
			}
			updateAvatar(user)
		},
		estilo: (user, message) => {
			const cmd = message.trim().split(" ").filter(x => !!x)

			if (cmd.length) {
				setBubbleStyle(user, cmd[0])
			}
		},
		efeito: (user, message) => {
			const cmd = message.trim().split(" ").filter(x => !!x)

			if (cmd.length) {
				setEffect(user, cmd[0])
			}
		},
		'efeito:custom': (user, message) => {
			setEffect(user, message)
		}
	} as { [action: string]: (user: string, message: string) => void }

	// initPubsub(params, {
	// 	onRewardRedeemed(user, reward, message) {
	// 		const actionName = Object.keys(ACTIONS).find(
	// 			a => 
	// 				params[a as keyof ChatRoomOptions] === reward || 
	// 				(a.includes(":") && 
	// 					Object.keys(params).find(p => a.split(":")[0] === p.split(":")[0] && params[p as keyof ChatRoomOptions] === reward)),
	// 		);

	// 		if (actionName && typeof ACTIONS[actionName] === "function") {
	// 			if (actionName.includes(":")) {
	// 				const value = Object
	// 					.keys(params)
	// 					.find(p => params[p as keyof ChatRoomOptions] === reward)!
	// 					.split(":")[1]

	// 				ACTIONS[actionName](user, value)
	// 			} else {
	// 				ACTIONS[actionName](user, message);
	// 			}
	// 		}
	// 	},
	// });
</script>

<style lang="scss">
	body {
		margin: 0;
		padding-bottom: 10px;
	}

	* {
		image-rendering: pixelated;
	}
</style>
