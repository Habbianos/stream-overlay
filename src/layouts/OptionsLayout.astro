---
import RootLayout from "./RootLayout.astro";

interface Props {
	widgetName: string;
	overlayUrl: string;
}

const { widgetName, overlayUrl } = Astro.props
---
<RootLayout title={`Options - ${widgetName}`}>
	<slot name="aside" />

	<main>
		<form><slot /></form>
	</main>
</RootLayout>

<script>
	function formDataToJson(f: FormData) {
		return Object.fromEntries(Array.from(f.keys(), k =>
			k.endsWith('[]') ? [k.slice(0, -2), f.getAll(k)] : [k, f.get(k)]));
	}
	function init() {
		const form = document.querySelector("form")!;
		form.addEventListener("submit", (evt) => {
			evt.preventDefault();
		});
		form.addEventListener("change", update);
		load()
		update();
	}
	let updateTimeout
	init()
	function update(evt?: Event) {
		if (updateTimeout) clearTimeout(updateTimeout)
		updateTimeout = setTimeout(() => _update(evt), 500)
	}
	function _update(evt?: Event) {
		if (evt?.target?.id === 'url') {
			loadUrl(evt.target.value)
			return
		}
		const form = document.querySelector("form")!;
		const data = new FormData(form)
		data.delete("url")
		save(data)
		const query = new URLSearchParams(data).toString()
		const url = window.location.origin + window.overlayURL + "?" + query
		form.url.value = url
		form.querySelector("iframe")!.src = url
	}
	function save(data: FormData) {
		if (load.loading) return
		if (!window.overlayURL) return
		const obj = formDataToJson(data)
		localStorage.setItem("_cache_"+window.overlayURL, JSON.stringify(obj))
	}
	function load() {
		if (load.loading) return
		load.loading = true
		if (!window.overlayURL) return
		const raw = localStorage.getItem("_cache_"+window.overlayURL)
		if (!raw) return

		const data = JSON.parse(raw)
		const form = document.querySelector("form")!;

		for (const prop in data) {
			if (Array.isArray(data[prop])) {
				
				for (const [i, value] of data[prop].entries()) {
					const elemts = Array.from(form.querySelectorAll(`[name="${prop}[]"]`))
						.filter(elem => !elem.disabled)
					const elem = elemts[i]

					switch(elem.type) {
						case "text":
							elem.value = value
							break;
						case "checkbox":
							elem.checked = value === 'on'
							break;
					}
					switch(elem.tagName) {
						case "SELECT":
							elem.value = value
					}
					elem.dispatchEvent(new Event('change'))
				}
			} else {
				const elem = form.querySelector(`[name=${prop}]`)
				if (!elem) return

				switch(elem.type) {
					case "text":
						elem.value = data[prop]
						break;
					case "checkbox":
						elem.checked = data[prop] === 'on'
						break;
				}
			}
		}
		load.loading = false
	}
	load.loading = false
	function loadUrl(url: string) {
		// TODO
	}
</script>

<style lang="scss">
	body {
		--nav_w: 200px;
		--left_bg_color: #f3f3f3;
		--right_bg_color: #fff;
		font-family: "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans",
			"Helvetica Neue", sans-serif;
		background-image: linear-gradient(
			to right,
			var(--left_bg_color) 50%,
			var(--right_bg_color) 50%
		);
		min-height: 100vh;
		display: flex;
		padding: 0 40px;
		max-width: 1080px;
		margin: 0 auto;
	}

	main {
		padding: 40px 0 50vh 40px;
		background-color: var(--right_bg_color);
		flex: 1;
	}

	main :global(iframe) {
		margin-top: 15px;
		border: none;
		width: 100%;
		height: 600px;
		box-shadow: 1px 1px 3px #8e8e8e;
	}

</style>